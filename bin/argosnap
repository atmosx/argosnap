#!/usr/bin/env ruby
require_relative File.expand_path('../../lib/argosnap', __FILE__)
require 'optparse'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "argosnap #{Argosnap::VERSION} ( https://github.com/atmosx/argosnap/ )\nUsage: argosnap [OPTIONS]"
  opt.separator  ""
  opt.separator  "     -v:           dislay version"
  opt.separator  "     -i config:    install configuration files"
  opt.separator  "     -i plist:     install plist file for OSX"
  opt.separator  "     -p:           prints the current amount in picoUSD"
  opt.separator  "     -p clean:     prints only the picollars (float rounded in 4 decimals), to use in cli"
  opt.separator  "     -n mail:      send notification via email"
  opt.separator  "     -n pushover:  send notification via pushover"
  opt.separator  "     -n osx:       display osx notification"
  opt.separator  "     -n notify:    send notifications everywhere"
  opt.separator  ""

  opt.on("-v","--version","display version") do |version|
    options[:version] = version
  end

  opt.on("-i","--install [OPTION]", "install configuration files") do |install|
    options[:install] = install || 'config'
  end

  opt.on("-p","--print [OPTION]","fetch current amount in picoUSD") do |print|
    options[:print] = print || 'default'
  end
  
  opt.on("-n","--notification [OPTION]","send notification via email") do |notification|
    options[:notification] = notification || 'notification'
  end

  opt.on("-h","--help","help") do |h|
    options[:help] = h
    puts opt_parser
  end
end

# Execution flow
begin
  opt_parser.parse!
  if options[:version]
    puts Argosnap::VERSION
  elsif options[:install]
    if options[:install] == 'config'
      Argosnap::Install.new.install
    elsif options[:install] == 'plist'
      Argosnap::Helpers.new.install_plist
    end
  elsif options[:notification]
    if options[:notification] == 'mail'
      Argosnap::Notifications.new.send_mail
    elsif options[:notification] == 'pushover'
      Argosnap::Notifications.new.send_pushover_notification
    elsif options[:notification] == 'osx'
      Argosnap::Notifications.new.send_osx_notification
    elsif options[:notification] == 'osx_check'
      Argosnap::Notifications.new.osx_check_and_notify
    elsif options[:notification] == 'notify'
      Argosnap::Notifications.new.notify
    else
      puts "You need to need to speficy notification option: 'mail' or 'pushover'"
    end
  elsif options[:cron]
    Argosnap::Notifications.notify
  elsif options[:help]
    # avoids double printing of 'opt_parser'
  elsif options[:print]
    if options[:print] == 'default'
      b = Argosnap::Fetch.new.balance
      puts "Current picoUSD balance: #{b}"
    elsif options[:print] == 'clean'
      puts Argosnap::Fetch.new.balance
    else
      puts "Option not recognized"
    end
  else
    puts opt_parser
  end
rescue OptionParser::InvalidOption 
  puts "No such option! Type 'argosnap -h' for help!"
  exit
end
