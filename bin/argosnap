#!/usr/bin/env ruby
require_relative File.expand_path('../../lib/argosnap', __FILE__)
require 'optparse'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "argosnap #{Argosnap::VERSION} ( https://github.com/atmosx/argosnap/ )\nUsage: argosnap [OPTIONS]"
  opt.separator  ""
  opt.separator  "     -v:        dislay version"
  opt.separator  "     -i config: install configuration files"
  opt.separator  "     -i cron:   installs Launchd script under OSX"
  opt.separator  "     -p:        prints the current amount in picodollars"
  opt.separator  "     -p osx:    prints desktop osx notification"
  opt.separator  "     -p clean:  prints only the picollars (float rounded in 4 decimals), to use in cli"
  opt.separator  ""

  opt.on("-v","--version","display version") do |version|
    options[:version] = version
  end

  opt.on("-i","--install [OPTION]", "install configuration files") do |install|
    options[:install] = install || 'config'
  end

  opt.on("-p","--print [OPTION]","fetch current amount in picodollars") do |print|
    options[:print] = print || 'default'
  end

  opt.on("-h","--help","help") do |h|
    options[:help] = h
    puts opt_parser
  end
end

# Execution flow
begin
  opt_parser.parse!
  if options[:version]
    puts Argosnap::VERSION
  elsif options[:install]
    if options[:install] == 'config'
      Argosnap::Install.new.config
    elsif options[:install] == 'cron'
      Argosnap::OSXNotifications.new.install_launchd_script
    end
  elsif options[:help]
    # avoids double printing of 'opt_parser'
  elsif options[:print]
    if options[:print] == 'osx'
      Argosnap::OSXNotifications.new.display
    elsif options[:print] == 'osx_check'
      Argosnap::OSXNotifications.new.display_check
    elsif options[:print] == 'default'
      b = Argosnap::Fetch.new.balance
      puts "Current balance (picodollars): #{b}"
    elsif options[:print] == 'clean'
      b = Argosnap::Fetch.new.balance
      puts b
    else
      puts "Option not recognized"
    end
  else
    puts opt_parser
  end
rescue OptionParser::InvalidOption 
  puts "No such option! Type 'argosnap -h' for help!"
  exit
end
